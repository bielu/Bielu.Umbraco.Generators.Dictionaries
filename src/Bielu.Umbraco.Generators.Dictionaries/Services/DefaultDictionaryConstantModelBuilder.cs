using System.Globalization;
using System.Text;
using Bielu.Umbraco.Generators.Dictionaries.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using Umbraco.Cms.Core;
using Umbraco.Cms.Core.Configuration;
using Umbraco.Cms.Core.Configuration.Models;
using Umbraco.Cms.Core.Hosting;
using Umbraco.Cms.Core.Models;
using Umbraco.Cms.Core.Services;
using Umbraco.Cms.Core.Strings;
using Umbraco.Extensions;
using File = System.IO.File;

//todo: adjust namespace in v2
// ReSharper disable once CheckNamespace
namespace Bielu.Umbraco.Generators.Dictionaries;

// ReSharper disable once ClassNeverInstantiated.Global
public class DefaultDictionaryConstantModelBuilder(
    ILocalizationService localizationService,
    IOptionsMonitor<ModelsBuilderSettings> config,
    IHostingEnvironment hostingEnvironment,
    IShortStringHelper shortStringHelper,
    ILogger<DefaultDictionaryConstantModelBuilder> logger,
    IOptionsMonitor<BieluDictionariesModelsBuilderOptions>? optionsMonitor)
    : IDictionaryConstantModelBuilder
{
    [Obsolete(
        "Use the constructor with IOptionsMonitor<BieluDictionariesModelsBuilderOptions> instead, this will be removed in v2")]
    public DefaultDictionaryConstantModelBuilder(ILocalizationService localizationService,
        IOptionsMonitor<ModelsBuilderSettings> config, IHostingEnvironment hostingEnvironment,
        IShortStringHelper shortStringHelper, ILogger<DefaultDictionaryConstantModelBuilder> logger) : this(
        localizationService, config, hostingEnvironment, shortStringHelper, logger, null)
    {
    }


    public async Task BuildAsync(IEnumerable<IDictionaryItem> dictionaryItems)
    {
        var options = optionsMonitor?.CurrentValue;
        if (options is not { Enabled: true })
        {
            logger.LogWarning("Dictionary model generation is not enabled, skipping dictionary model generation");
            return;
        }

        if (config.CurrentValue.ModelsMode is not ModelsMode.SourceCodeAuto and not ModelsMode.SourceCodeManual)
        {
            logger.LogWarning(
                "ModelsBuilder is not in SourceCodeAuto or SourceCodeManual mode, skipping dictionary model generation");
        }

        string? modelsDirectory;
        modelsDirectory = config.CurrentValue.ModelsDirectoryAbsolute(hostingEnvironment);
        if (!string.IsNullOrWhiteSpace(options.ConstantsOutputDirectory))
        {
            //todo: we should same as ModelsDirectoryAbsolute
            modelsDirectory = modelsDirectory
                .Replace(
                    config.CurrentValue.ModelsDirectory.TrimStart("~/").Replace("/","\\"),
                    $"{options.ConstantsOutputDirectory.TrimStart("/").Replace("/","\\")}"
                    );
        }
        else if (modelsDirectory.EndsWith("models", StringComparison.InvariantCultureIgnoreCase))
        {
            modelsDirectory = $"{modelsDirectory.TrimEnd("models".ToCharArray())}constants";
        }

        if (!Directory.Exists(modelsDirectory))
        {
            Directory.CreateDirectory(modelsDirectory);
        }

        var dictionaryConstantModelText = await GenerateDictionaryConstantModelText(dictionaryItems);

        var dictionaryConstantModelFilePath =
            Path.Combine(modelsDirectory,
                string.IsNullOrWhiteSpace(options.ConstantsClassName)
                    ? $"Dictionaries.generated.cs"
                    : $"{options.ConstantsClassName}.generated.cs");

        await using var fileStream = File.Open(dictionaryConstantModelFilePath, FileMode.Create);
        await using var file = new StreamWriter(fileStream);
        await file.WriteAsync(dictionaryConstantModelText);
    }

    public string GetModelsNamespace()
    {
        var options = optionsMonitor?.CurrentValue;
        if (!string.IsNullOrWhiteSpace(options?.ConstantsNamespace))
        {
            return options.ConstantsNamespace;
        }

        // use configured else fallback to default MB namespace
        return string.IsNullOrWhiteSpace(config.CurrentValue.ModelsNamespace)
            ? Constants.ModelsBuilder.DefaultModelsNamespace
            : config.CurrentValue.ModelsNamespace;
    }

    private async Task<string> GenerateDictionaryConstantModelText(IEnumerable<IDictionaryItem> dictionaryItems)
    {
        var options = optionsMonitor?.CurrentValue;
        var dictionaryConstantModelText = new StringBuilder();
        AddAutogeneratedComment(dictionaryConstantModelText);
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture, $"namespace {GetModelsNamespace()};");
        AddResharperDisableCommentStartFile(dictionaryConstantModelText);
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture,
            $"public static class {(string.IsNullOrWhiteSpace(options?.ConstantsClassName) ? "Dictionaries" : options.ConstantsClassName)}");
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture, $"{{");
        foreach (var dictionaryItem in dictionaryItems)
        {
            await GenerateDictionaryAsync(dictionaryConstantModelText, dictionaryItem);
        }

        dictionaryConstantModelText.AppendLine("}");
        AddResharperDisableCommentEndFile(dictionaryConstantModelText);

        return dictionaryConstantModelText.ToString();
    }

    private static void AddResharperDisableCommentEndFile(StringBuilder dictionaryConstantModelText) =>
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture,
            $"#pragma warning restore IDE1006 // Naming Styles");

    private static void AddResharperDisableCommentStartFile(StringBuilder dictionaryConstantModelText)
    {
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture,
            $"#pragma warning disable IDE1006 // Naming Styles");
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture,
            $"// ReSharper disable InconsistentNaming");
    }

    // ReSharper disable once MemberCanBeMadeStatic.Local
#pragma warning disable CA1822
    private void AddAutogeneratedComment(StringBuilder dictionaryConstantModelText)
#pragma warning restore CA1822
    {
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture,
            $"//------------------------------------------------------------------------------");
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture, $"// <auto-generated>");
        var version = typeof(DefaultDictionaryConstantModelBuilder).Assembly.GetName().Version;
        dictionaryConstantModelText.Append(CultureInfo.InvariantCulture,
            $"/// This file is autogenerated by Bielu.Umbraco.Generators.Dictionaries ");
        if (version != null)
        {
            dictionaryConstantModelText.Append(CultureInfo.InvariantCulture,
                $"v{version.Major}.{version.Minor}.{version.Build}");
        }

        dictionaryConstantModelText.AppendLine();
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture, $"/// </auto-generated>");
        dictionaryConstantModelText.AppendLine(CultureInfo.InvariantCulture,
            $"//------------------------------------------------------------------------------");
    }

    private const string SpacerTemplate = "    ";

    private async Task GenerateDictionaryAsync(StringBuilder stringBuilder, IDictionaryItem dictionary, int lvl = 0)
    {
        AppendSpacer(stringBuilder, lvl + 1);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture,
            $"public static class {ToClassName(dictionary.ItemKey)}");
        AppendSpacer(stringBuilder, lvl + 1);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture, $"{{");
        AppendSpacer(stringBuilder, lvl + 2);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture,
            $"public const string Alias = \"{dictionary.ItemKey}\";");
        AppendSpacer(stringBuilder, lvl + 2);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture,
            $"public static readonly Guid Key = new Guid(\"{dictionary.Key}\");");
        AppendSpacer(stringBuilder, lvl + 2);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture, $"public const int Id = {dictionary.Id};");
        AppendSpacer(stringBuilder, lvl + 2);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture, $"//SubDictionaries of level {lvl + 1} (if any)");

        foreach (var dictionaryItem in localizationService.GetDictionaryItemChildren(dictionary.Key).ToList())
        {
            await GenerateDictionaryAsync(stringBuilder, dictionaryItem, lvl + 1);
        }

        AppendSpacer(stringBuilder, lvl + 1);
        stringBuilder.AppendLine(CultureInfo.InvariantCulture, $"}}");
    }

    private string ToClassName(string dictionaryItemKey) => shortStringHelper.CleanString(dictionaryItemKey,
        CleanStringType.ConvertCase | CleanStringType.PascalCase);

    private static void AppendSpacer(StringBuilder stringBuilder, int lvl)
    {
        for (var i = 0; i < lvl; i++)
        {
            stringBuilder.Append(SpacerTemplate);
        }
    }
}
